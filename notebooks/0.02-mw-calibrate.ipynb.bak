{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import optimize\n",
    "from sklearn.gaussian_process import GaussianProcessRegressor\n",
    "from sklearn.gaussian_process.kernels import RationalQuadratic, RBF\n",
    "from output import format_for_submission\n",
    "import csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "random.seed(51)\n",
    "\n",
    "def get_function_data(function_number):\n",
    "    ary_in = np.load(f'../data/raw/initial_data/function_{function_number}/initial_inputs.npy')\n",
    "    ary_out = np.load(f'../data/raw/initial_data/function_{function_number}/initial_outputs.npy')\n",
    "\n",
    "    week1_out = [0.0, -0.03634716524130564, -0.13995571712281177, -11.512791229057324, 351.7115420928652, -0.5971511450896173, 0.2910786825809617, 8.618272750952901]\n",
    "    week1_in = [np.array([0.00367, 0.9999 ]), \n",
    "                np.array([0.851999, 0.973204]), \n",
    "                np.array([0.747032, 0.28413 , 0.226329]), \n",
    "                np.array([0.169128, 0.756136, 0.275457, 0.528761]), \n",
    "                np.array([0.439601, 0.772709, 0.376277, 0.933269]), \n",
    "                np.array([0.232204, 0.132714, 0.53824 , 0.760706, 0.075595]), \n",
    "                np.array([0.476821, 0.248196, 0.242816, 0.576157, 0.162416, 0.290926]), \n",
    "                np.array([0.221603, 0.703755, 0.674607, 0.130295, 0.376739, 0.669444, 0.136655, 0.061316])]    \n",
    "    \n",
    "    week2_out = [-1.2075460499722905e-18, 0.17608630702211278, -0.17239781799687137, -31.982880235497266, 1236.8846557000643, -2.451406055102475, 0.00010805707939840242, 5.178959940699899]\n",
    "    week2_in = [np.array([0.476035, 0.572563]), \n",
    "                np.array([0.641846, 0.498841]), \n",
    "                np.array([0., 0., 0.]), \n",
    "                np.array([0.953433, 0.895217, 0.812477, 0.618719]), \n",
    "                np.array([0.987523, 0.470227, 0.946409, 0.105412]), \n",
    "                np.array([3.40696e-01, 4.94179e-01, 2.10000e-05, 3.08050e-02, 9.39958e-01]), \n",
    "                np.array([0.88314 , 0.756642, 0.      , 0.      , 0.9     , 0.942719]), \n",
    "                np.array([0.993634, 0.968223, 0.979285, 0.397318, 0.965856, 0.955218, 0.006078, 0.024001])]\n",
    "\n",
    "    ary_out=np.append(ary_out, week1_out[function_number-1])\n",
    "    ary_out=np.append(ary_out, week2_out[function_number-1])\n",
    "    ary_in=np.vstack((ary_in, week1_in[function_number-1]))\n",
    "    ary_in=np.vstack((ary_in, week2_in[function_number-1]))\n",
    "    \n",
    "    return ary_in, ary_out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max from grid search: 0.6483588866639842\n"
     ]
    }
   ],
   "source": [
    "#Test bimodal function\n",
    "class one_d_test:\n",
    "    # Parameters for the two Gaussian peaks\n",
    "    #mu1 is x of first peak\n",
    "    #mu2 is x of second peak TODO: experiment with 0.02-0.2\n",
    "    #Sigmas are widths of peaks\n",
    "    #alpha1 is weight of first peak (default 1)\n",
    "    #alpha2 is weight of second peak (default 0.5)\n",
    "\n",
    "    sigma1 = 0.1\n",
    "    sigma2 = 0.1\n",
    "    mu1 = 0.3\n",
    "    mu2 = 0.7\n",
    "    alpha1 = 1\n",
    "    alpha2 = 0.5\n",
    "\n",
    "    def __init__(self, sigma1=0.1, sigma2=0.1, mu1=0.3, mu2=0.7, alpha1=1, alpha2=0.5):\n",
    "        self.sigma1 = sigma1\n",
    "        self.sigma2 = sigma2\n",
    "        self.mu1 = mu1\n",
    "        self.mu2 = mu2\n",
    "        self.alpha1 = alpha1\n",
    "        self.alpha2 = alpha2\n",
    "\n",
    "    def call_function(self, x): \n",
    "        # Calculate the two Gaussian components\n",
    "        gaussian1 = np.exp(-((x - self.mu1) ** 2) / (2 * self.sigma1 ** 2))\n",
    "        gaussian2 = np.exp(-((x - self.mu2) ** 2) / (2 * self.sigma2 ** 2))\n",
    "        gaussian1 = self.alpha1 * gaussian1\n",
    "        gaussian2 = self.alpha2 * gaussian2\n",
    "        \n",
    "        # Combine and normalize to keep the output between 0 and 1\n",
    "        result = (gaussian1 + gaussian2) / (self.alpha1 + self.alpha2)\n",
    "        return result\n",
    "\n",
    "# Test the function with a range of values\n",
    "x = np.linspace(0, 1, 500)\n",
    "testmu1 = random.random()\n",
    "testmu2 = random.random()\n",
    "testalpha2 = random.uniform(0.3, 0.9)\n",
    "oned = one_d_test(mu1=testmu1, mu2=testmu2, alpha2=testalpha2)\n",
    "y = oned.call_function(x)\n",
    "\n",
    "# Plot the function\n",
    "plt.figure(figsize=(8, 5))\n",
    "plt.plot(x, y, label=\"Bimodal Function\")\n",
    "plt.title(\"Bimodal Function\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"f(x)\")\n",
    "plt.grid(True)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "print(\"Max from grid search:\", np.max(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max from grid search: 0.5671041065151622\n"
     ]
    }
   ],
   "source": [
    "class two_d_test:\n",
    "\n",
    "    def __init__(self, sigma1=0.1, sigma2=0.1, mu1=[0.3,0.3], mu2=[0.7,0.7], alpha1=1, alpha2=0.5):\n",
    "        self.sigma1 = sigma1\n",
    "        self.sigma2 = sigma2\n",
    "        self.mu1 = mu1\n",
    "        self.mu2 = mu2\n",
    "        self.alpha1 = alpha1\n",
    "        self.alpha2 = alpha2\n",
    "\n",
    "    sigma1 = 0.1\n",
    "    sigma2 = 0.1\n",
    "    mu1 = [0.3,0.3]\n",
    "    mu2 = [0.7,0.7]\n",
    "    alpha1 = 1\n",
    "    alpha2 = 0.5\n",
    "\n",
    "    def call_function(self, X):\n",
    "        \"\"\"\n",
    "        Bimodal function f(x0, x1) in [0, 1]^2 -> [0, 1].\n",
    "        X is an array of shape (N, 2).\n",
    "        Returns a 1D array of length N, each element in [0, 1].\n",
    "        \"\"\"\n",
    "\n",
    "        X = np.asarray(X)\n",
    "        X = np.atleast_2d(X)  # Ensure X is 2D\n",
    "        x0 = X[:, 0]  # shape (N,)\n",
    "        x1 = X[:, 1]  # shape (N,)\n",
    "\n",
    "        # 2D Gaussian around (mu1[0], mu1[1])\n",
    "        g1 = np.exp(-(((x0 - self.mu1[0]) ** 2) / (2 * self.sigma1 ** 2)\n",
    "                      + ((x1 - self.mu1[1]) ** 2) / (2 * self.sigma1 ** 2)))\n",
    "\n",
    "        # 2D Gaussian around (mu2[0], mu2[1]) \n",
    "        g2 = np.exp(-(((x0 - self.mu2[0]) ** 2) / (2 * self.sigma2 ** 2)\n",
    "                      + ((x1 - self.mu2[1]) ** 2) / (2 * self.sigma2 ** 2)))\n",
    "\n",
    "        # Combine and normalize so max remains <= 1\n",
    "        return (self.alpha1 * g1 + self.alpha2 * g2) / (self.alpha1 + self.alpha2)\n",
    "\n",
    "\n",
    "def plot_twod_objective(twod):\n",
    "\n",
    "    N = 100\n",
    "    x0_vals = np.linspace(0, 1, N)\n",
    "    x1_vals = np.linspace(0, 1, N)\n",
    "    X0, X1 = np.meshgrid(x0_vals, x1_vals)        # shape (N, N) each\n",
    "    X_grid = np.column_stack((X0.ravel(), X1.ravel()))  # shape (N*N, 2)\n",
    "\n",
    "    y_grid  = twod.call_function(X_grid)\n",
    "    # Reshape back to (N, N) for plotting\n",
    "    y_2d = y_grid.reshape(N, N)\n",
    "    \n",
    "    # Heatmap\n",
    "    plt.figure(figsize=(6, 5))\n",
    "    plt.imshow(y_2d, origin='lower', extent=(0,1,0,1), cmap='viridis', aspect='equal')\n",
    "    plt.colorbar(label='f(x, y)')\n",
    "    plt.title(\"Bimodal 2D Function (Heatmap)\")\n",
    "    plt.xlabel(\"x0\")\n",
    "    plt.ylabel(\"x1\")\n",
    "    plt.show()\n",
    "\n",
    "    # 3D surface\n",
    "    #fig = plt.figure(figsize=(8,6))\n",
    "    #ax = fig.add_subplot(111, projection='3d')\n",
    "    #ax.plot_surface(X0, X1, y_2d, cmap='viridis', edgecolor='none')\n",
    "    #ax.set_title(\"Bimodal 2D Function (Surface Plot)\")\n",
    "    #ax.set_xlabel(\"x0\")\n",
    "    #ax.set_ylabel(\"x1\")\n",
    "    #ax.set_zlabel(\"f(x, y)\")\n",
    "    #plt.show()\n",
    "\n",
    "    print(\"Max from grid search:\", np.max(y_2d))\n",
    "\n",
    "\n",
    "\n",
    "testmu1 = [random.random(),random.random()]\n",
    "testmu2 = [random.random(),random.random()]\n",
    "testalpha2 = random.uniform(0.3, 0.9)\n",
    "\n",
    "twod = two_d_test(mu1=testmu1, mu2=testmu2, alpha2=testalpha2)\n",
    "plot_twod_objective(twod)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test acquisition functions on the 1d function\n",
    "\n",
    "noise_assumption = 1e-10 # noise assumption, a hyper-parameter\n",
    "\n",
    "input_bounds = [(0, 1)] # bounds for the input space\n",
    "\n",
    "#Experiment with lengthscale 0.1 to 0.5 in steps of 0.05\n",
    "# and kappa 0.1 to 3 in steps of 0.1\n",
    "\n",
    "def input_bounds_for_dim(dimensions):\n",
    "    return [(0, 1) for _ in range(dimensions)]\n",
    "\n",
    "def bounds_midpoint(input_bounds):\n",
    "    return np.array([(low + high) / 2.0 for low, high in input_bounds])\n",
    "\n",
    "def acquisition_UCB(x, model, ucb_kappa):\n",
    "    mean, std = model.predict(x.reshape(1, -1), return_std=True)\n",
    "    return mean + ucb_kappa * std\n",
    "\n",
    "def test_on_oned(rbf_lengthscale, ucb_acquisition_kappa, test_oned_function, max_iterations):\n",
    "    \n",
    "    objective_x = np.linspace(0, 1, 500)\n",
    "    objective_y = test_oned_function.call_function(objective_x)\n",
    "    objective_y_max = max(objective_y)\n",
    "\n",
    "    #quick plot objective function\n",
    "    #plt.figure(figsize=(3, 5))\n",
    "    #plt.plot(objective_x, objective_y, label=\"Objective\")\n",
    "    #plt.grid(True)\n",
    "    #plt.legend()\n",
    "    #plt.show()\n",
    "\n",
    "    kernel = RBF(length_scale=rbf_lengthscale, length_scale_bounds='fixed')\n",
    "    model = GaussianProcessRegressor(kernel = kernel, alpha=noise_assumption)\n",
    "\n",
    "    X = []\n",
    "    Y = []\n",
    "    # First point\n",
    "    x0 = bounds_midpoint(input_bounds)  # array([0.5])\n",
    "    X.append(x0)\n",
    "    Y.append(test_oned_function.call_function(x0))\n",
    "    i=0\n",
    "    #print(\"Objective max:\", objective_y_max)\n",
    "    while abs(max(Y) - objective_y_max) > 0.01:\n",
    "        i+=1\n",
    "        if i > max_iterations:\n",
    "            print(\"Max iterations reached\")\n",
    "            return 0\n",
    "        #print(\"Iteration\", i, \" Max found:\", max(Y))\n",
    "        # print(abs(max(Y) - objective_y_max))\n",
    "        # fit the model\n",
    "        model.fit(X, Y)\n",
    "            \n",
    "        # optimize the acquisition function\n",
    "        result = optimize.minimize(lambda x: -acquisition_UCB(x, model, ucb_acquisition_kappa), x0=bounds_midpoint(input_bounds), bounds=input_bounds)\n",
    "        x_new = result.x\n",
    "        y_new = test_oned_function.call_function(x_new)\n",
    "        \n",
    "        # add the new observation to the training set\n",
    "        X.append(x_new) #assumes 1d\n",
    "        Y.append(y_new)\n",
    "\n",
    "    return i\n",
    "\n",
    "def plot_oned_objective(oned):\n",
    "    objective_x = np.linspace(0, 1, 500)\n",
    "    objective_y = oned.call_function(objective_x)\n",
    "    plt.figure(figsize=(3, 3))\n",
    "    plt.plot(objective_x, objective_y, label=\"Objective\")\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def output_results_csv(number_of_functions, results):\n",
    "    headers = [\"Lengthscale\", \"Acq kappa\"]\n",
    "    for i in range(number_of_functions):\n",
    "        headers.append(\"Function \" + str(i))\n",
    "    with open('out.csv', 'w', newline='') as f:\n",
    "        writer = csv.writer(f)\n",
    "        writer.writerow(headers)\n",
    "        writer.writerows(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lengthscale: 0.05\n",
      "Kappa: 0.1\n",
      "Kappa: 0.2\n",
      "Kappa: 0.3\n",
      "Kappa: 0.4\n",
      "Max iterations reached\n",
      "Kappa: 0.5\n",
      "Max iterations reached\n",
      "Kappa: 0.6\n",
      "Kappa: 0.7\n",
      "Kappa: 0.8\n",
      "Kappa: 0.9\n",
      "Kappa: 1.0\n",
      "Max iterations reached\n",
      "Kappa: 1.1\n",
      "Kappa: 1.2\n",
      "Max iterations reached\n",
      "Kappa: 1.3\n",
      "Kappa: 1.4\n",
      "Kappa: 1.5\n",
      "Kappa: 1.6\n",
      "Kappa: 1.7\n",
      "Kappa: 1.8\n",
      "Max iterations reached\n",
      "Kappa: 1.9\n",
      "Lengthscale: 0.1\n",
      "Kappa: 0.1\n",
      "Kappa: 0.2\n",
      "Kappa: 0.3\n",
      "Kappa: 0.4\n",
      "Kappa: 0.5\n",
      "Kappa: 0.6\n",
      "Kappa: 0.7\n",
      "Kappa: 0.8\n",
      "Max iterations reached\n",
      "Kappa: 0.9\n",
      "Max iterations reached\n",
      "Kappa: 1.0\n",
      "Max iterations reached\n",
      "Kappa: 1.1\n",
      "Max iterations reached\n",
      "Kappa: 1.2\n",
      "Max iterations reached\n",
      "Kappa: 1.3\n",
      "Max iterations reached\n",
      "Kappa: 1.4\n",
      "Max iterations reached\n",
      "Kappa: 1.5\n",
      "Max iterations reached\n",
      "Kappa: 1.6\n",
      "Max iterations reached\n",
      "Kappa: 1.7\n",
      "Max iterations reached\n",
      "Kappa: 1.8\n",
      "Max iterations reached\n",
      "Kappa: 1.9\n",
      "Max iterations reached\n",
      "Lengthscale: 0.15000000000000002\n",
      "Kappa: 0.1\n",
      "Kappa: 0.2\n",
      "Kappa: 0.3\n",
      "Kappa: 0.4\n",
      "Kappa: 0.5\n",
      "Max iterations reached\n",
      "Kappa: 0.6\n",
      "Max iterations reached\n",
      "Kappa: 0.7\n",
      "Max iterations reached\n",
      "Kappa: 0.8\n",
      "Max iterations reached\n",
      "Kappa: 0.9\n",
      "Max iterations reached\n",
      "Kappa: 1.0\n",
      "Kappa: 1.1\n",
      "Max iterations reached\n",
      "Kappa: 1.2\n",
      "Max iterations reached\n",
      "Kappa: 1.3\n",
      "Max iterations reached\n",
      "Kappa: 1.4\n",
      "Max iterations reached\n",
      "Kappa: 1.5\n",
      "Max iterations reached\n",
      "Kappa: 1.6\n",
      "Max iterations reached\n",
      "Kappa: 1.7\n",
      "Kappa: 1.8\n",
      "Kappa: 1.9\n",
      "Lengthscale: 0.2\n",
      "Kappa: 0.1\n",
      "Max iterations reached\n",
      "Kappa: 0.2\n",
      "Max iterations reached\n",
      "Kappa: 0.3\n",
      "Max iterations reached\n",
      "Kappa: 0.4\n",
      "Kappa: 0.5\n",
      "Kappa: 0.6\n",
      "Max iterations reached\n",
      "Kappa: 0.7\n",
      "Max iterations reached\n",
      "Max iterations reached\n",
      "Kappa: 0.8\n",
      "Max iterations reached\n",
      "Kappa: 0.9\n",
      "Kappa: 1.0\n",
      "Max iterations reached\n",
      "Kappa: 1.1\n",
      "Max iterations reached\n",
      "Kappa: 1.2\n",
      "Max iterations reached\n",
      "Kappa: 1.3\n",
      "Max iterations reached\n",
      "Kappa: 1.4\n",
      "Max iterations reached\n",
      "Kappa: 1.5\n",
      "Max iterations reached\n",
      "Kappa: 1.6\n",
      "Max iterations reached\n",
      "Kappa: 1.7\n",
      "Max iterations reached\n",
      "Kappa: 1.8\n",
      "Max iterations reached\n",
      "Kappa: 1.9\n",
      "Max iterations reached\n"
     ]
    }
   ],
   "source": [
    "#ucb_kappa = 3\n",
    "#rbf_lengthscale = 0.2 # lengthscale parameter\n",
    "test_functions = []\n",
    "for i in range(3):\n",
    "    testmu1 = random.random()\n",
    "    testmu2 = random.random()\n",
    "    testalpha2 = random.uniform(0.3, 0.9)\n",
    "    oned = one_d_test(mu1=testmu1, mu2=testmu2, alpha2=testalpha2)\n",
    "    test_functions.append(oned)\n",
    "    plot_oned_objective(oned) # to see what we're dealing with\n",
    "\n",
    "results = []\n",
    "for rbf_lengthscale in np.arange(0.05, 0.25, 0.05):\n",
    "    print(\"Lengthscale:\", rbf_lengthscale)\n",
    "    for kappa in np.arange(0.1, 2.00, 0.1):\n",
    "        ucb_kappa = round(kappa, 2)\n",
    "        print(\"Kappa:\", ucb_kappa)\n",
    "        fn = 0\n",
    "        fn_result = []\n",
    "        fn_result.append(rbf_lengthscale)\n",
    "        fn_result.append(ucb_kappa)\n",
    "        for oned in test_functions:\n",
    "            iterations_required = test_on_oned(rbf_lengthscale, ucb_kappa, oned, 20)\n",
    "            fn_result.append(iterations_required)\n",
    "            #print(\"Lengthscale:\", rbf_lengthscale, \"Kappa:\", ucb_kappa, \"Function:\", fn, \"Needed:\", iterations_required)\n",
    "            fn+=1\n",
    "        results.append(fn_result)\n",
    "\n",
    "output_results_csv(len(test_functions), results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#test on 2d functions\n",
    "twod_input_bounds = [(0, 1), (0,1)]\n",
    "def test_on_twod(rbf_lengthscale, ucb_acquisition_kappa, test_twod_function, max_iterations):\n",
    "    \n",
    "    N = 100\n",
    "    x0_vals = np.linspace(0, 1, N)\n",
    "    x1_vals = np.linspace(0, 1, N)\n",
    "    X0, X1 = np.meshgrid(x0_vals, x1_vals)        # shape (N, N) each\n",
    "    objective_x = np.column_stack((X0.ravel(), X1.ravel()))  # shape (N*N, 2)\n",
    "    objective_y = test_twod_function.call_function(objective_x)\n",
    "    objective_y_max = max(objective_y)\n",
    "\n",
    "\n",
    "    kernel = RBF(length_scale=rbf_lengthscale)\n",
    "    model = GaussianProcessRegressor(kernel = kernel, alpha=noise_assumption)\n",
    "\n",
    "    X = []\n",
    "    Y = []\n",
    "    # First point\n",
    "    initial_x = bounds_midpoint(twod_input_bounds)  # array([0.5])\n",
    "    X.append(initial_x)\n",
    "    Y.append(test_twod_function.call_function(initial_x))\n",
    "    for i in range(5):\n",
    "        starting_x = [random.random(), random.random()]\n",
    "        starting_y = test_twod_function.call_function(starting_x)\n",
    "        X.append(starting_x)\n",
    "        Y.append(starting_y)\n",
    "    \n",
    "    i=0\n",
    "\n",
    "    #print(\"Objective max:\", objective_y_max)\n",
    "    while abs(max(Y) - objective_y_max) > 0.01:\n",
    "        i+=1\n",
    "        # print(\"Max y:\", max(Y))\n",
    "        if i > max_iterations:\n",
    "            print(\"Max iterations reached\")\n",
    "            return 0\n",
    "        #print(\"Iteration\", i, \" Max found:\", max(Y))\n",
    "        # print(abs(max(Y) - objective_y_max))\n",
    "        # fit the model\n",
    "        model.fit(X, Y)\n",
    "            \n",
    "        # optimize the acquisition function\n",
    "        result = optimize.minimize(lambda x: -acquisition_UCB(x, model, ucb_acquisition_kappa), x0=initial_x, bounds=twod_input_bounds)\n",
    "        x_new = result.x\n",
    "        y_new = test_twod_function.call_function(x_new)\n",
    "        \n",
    "        # add the new observation to the training set\n",
    "        X.append(x_new)\n",
    "        Y.append(y_new)\n",
    "\n",
    "    return i\n",
    "\n",
    "test_functions = []\n",
    "for i in range(3): #5\n",
    "    testmu1 = [random.random(),random.random()]\n",
    "    testmu2 = [random.random(),random.random()]\n",
    "    testalpha2 = random.uniform(0.3, 0.9)\n",
    "    twod = two_d_test(mu1=testmu1, mu2=testmu2, alpha2=testalpha2)\n",
    "    test_functions.append(twod)\n",
    "    plot_twod_objective(twod) # to see what we're dealing with\n",
    "\n",
    "#test_on_twod(0.15, 0.4, test_functions[0], 20)\n",
    "\n",
    "results = []\n",
    "for rbf_lengthscale in np.arange(0.05, 0.5, 0.05):\n",
    "    print(\"Lengthscale:\", rbf_lengthscale)\n",
    "    for kappa in np.arange(0.1, 2.00, 0.1):\n",
    "        ucb_kappa = round(kappa, 2)\n",
    "        print(\"Kappa:\", ucb_kappa)\n",
    "        fn = 0\n",
    "        fn_result = []\n",
    "        fn_result.append(rbf_lengthscale)\n",
    "        fn_result.append(ucb_kappa)\n",
    "        for twod in test_functions:\n",
    "            iterations_required = test_on_twod(rbf_lengthscale, ucb_kappa, twod, 20)\n",
    "            fn_result.append(iterations_required)\n",
    "            print(\"Lengthscale:\", rbf_lengthscale, \"Kappa:\", ucb_kappa, \"Function:\", fn, \"Needed:\", iterations_required)\n",
    "            fn+=1\n",
    "        results.append(fn_result)\n",
    "\n",
    "#print(results)\n",
    "output_results_csv(len(test_functions), results)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from the output, lengthscale 0.25 kappa 0.3 was about best for 2d\n",
    "\n",
    "for 1d, lengthscale 0.15 kappa 0.4\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function 1\n",
      "[0.12784877 0.19849096]\n",
      "Function 2\n",
      "[0.2460767  0.65659691]\n",
      "Function 3\n",
      "[0.5 0.5 0.5]\n",
      "Function 4\n",
      "[0.51035754 0.52198492 0.38399514 0.44543879]\n",
      "Function 5\n",
      "[0.5 0.5 0.5 0.5]\n",
      "Function 6\n",
      "[0.66336004 0.         1.         0.33298401 0.        ]\n",
      "Function 7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\mike\\anaconda3\\Lib\\site-packages\\sklearn\\gaussian_process\\_gpr.py:663: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
      "c:\\Users\\mike\\anaconda3\\Lib\\site-packages\\sklearn\\gaussian_process\\kernels.py:445: ConvergenceWarning: The optimal value found for dimension 0 of parameter length_scale is close to the specified lower bound 1e-05. Decreasing the bound and calling fit again may find a better value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.         0.16518481 0.28680961 0.         0.31810943 1.        ]\n",
      "Function 8\n",
      "[0.11926467 0.25446646 0.1172752  0.24563019 0.54842642 0.55317239\n",
      " 0.23011142 0.51606161]\n"
     ]
    }
   ],
   "source": [
    "#todo: a cutdown version that uses sample data instead of the initial random 5 and calls to the objective function, and suggests next point to explore.\n",
    "#Use that to do this week's submissions.\n",
    "#Then, next week, start fitting on functions that are closer to the real ones in terms of local maxima/variance.\n",
    "\n",
    "\n",
    "def suggest_next(rbf_lengthscale, ucb_acquisition_kappa, function_num):\n",
    "    kernel = RBF(length_scale=rbf_lengthscale)\n",
    "    model = GaussianProcessRegressor(kernel = kernel, alpha=noise_assumption)\n",
    "    X, Y = get_function_data(function_num)\n",
    "    dimensions = X.shape[1]\n",
    "    bounds = input_bounds_for_dim(dimensions)\n",
    "    initial_x = bounds_midpoint(bounds)\n",
    "    \n",
    "    model.fit(X, Y)\n",
    "    \n",
    "    result = optimize.minimize(lambda x: -acquisition_UCB(x, model, ucb_acquisition_kappa), x0=initial_x, bounds=bounds)\n",
    "    return result.x\n",
    "\n",
    "\n",
    "for i in range(1,9):\n",
    "    print(\"Function\", i)\n",
    "    formatted = format_for_submission(suggest_next(0.25, 0.3, i))\n",
    "    print(formatted)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
